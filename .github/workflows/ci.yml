name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: macos-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build TypeScript
      run: npm run build
    
    - name: Run unit tests with coverage
      run: npm run test:unit -- --coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  e2e-test:
    runs-on: macos-15  # Use macOS-15 which has Xcode 16.0+
    needs: test  # Run after unit tests complete
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode 16.0
      run: sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
    
    - name: Install iOS Platform
      run: |
        echo "=== Installing iOS Platform ==="
        # Install iOS runtime and simulators
        sudo xcodebuild -downloadPlatform iOS -quiet || true
        sudo xcodebuild -downloadPlatform iOS 2>&1 | grep -v "DVTDownloadable" || true
        
        # Also try installing via xcrun simctl  
        sudo xcrun simctl runtime add "iOS 18.5" || true
        
        # Wait for installation
        sleep 10
        
        # Verify installation
        echo ""
        echo "=== Available SDKs after installation ==="
        xcodebuild -showsdks
        
        echo ""
        echo "=== Verifying iOS platform with actual simulator ==="
        # Try with a specific simulator instead of generic
        xcodebuild -showBuildSettings -project test_artifacts/TestProjectXCTest/TestProjectXCTest.xcodeproj \
          -scheme TestProjectXCTest \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.5' 2>&1 | grep "SDKROOT" | head -2 || echo "Platform verification failed"
    
    - name: Diagnose CI Environment
      run: |
        echo "=== Xcode Version ==="
        xcodebuild -version
        echo ""
        echo "=== Available Simulators ==="
        xcrun simctl list devices | head -50
        echo ""
        echo "=== Available Runtimes ==="
        xcrun simctl list runtimes
        echo ""
        echo "=== Test Different Destination Formats ==="
        echo ""
        echo "1. Testing generic/platform=iOS"
        xcodebuild -showdestinations -project test_artifacts/TestProjectXCTest/TestProjectXCTest.xcodeproj -scheme TestProjectXCTest 2>&1 | grep -A5 -B5 "iOS" || true
        echo ""
        echo "2. Testing with specific simulator (iPhone 16)"
        xcodebuild -showBuildSettings -project test_artifacts/TestProjectXCTest/TestProjectXCTest.xcodeproj \
          -scheme TestProjectXCTest \
          -destination 'platform=iOS Simulator,name=iPhone 16' 2>&1 | grep -E "PLATFORM|SDK|error" | head -10 || true
        echo ""
        echo "3. Testing with OS version (iPhone 16, iOS 18.5)"
        xcodebuild -showBuildSettings -project test_artifacts/TestProjectXCTest/TestProjectXCTest.xcodeproj \
          -scheme TestProjectXCTest \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.5' 2>&1 | grep -E "PLATFORM|SDK|error" | head -10 || true
        echo ""
        echo "4. Testing macOS platform (should work)"
        xcodebuild -showBuildSettings -project test_artifacts/TestProjectXCTest/TestProjectXCTest.xcodeproj \
          -scheme TestProjectXCTest \
          -destination 'platform=macOS' 2>&1 | grep -E "PLATFORM|SDK" | head -5 || true
        echo ""
        echo "=== Check what platforms the project actually supports ==="
        xcodebuild -showBuildSettings -project test_artifacts/TestProjectXCTest/TestProjectXCTest.xcodeproj \
          -scheme TestProjectXCTest 2>&1 | grep -E "SUPPORTED_PLATFORMS|SDKROOT|IPHONEOS_DEPLOYMENT_TARGET" || true
    
    - name: Test iOS Build Directly
      run: |
        echo "=== Attempting direct iOS build ==="
        echo "1. Try building with generic iOS destination"
        xcodebuild build \
          -project test_artifacts/TestProjectXCTest/TestProjectXCTest.xcodeproj \
          -scheme TestProjectXCTest \
          -destination 'generic/platform=iOS' \
          CODE_SIGNING_ALLOWED=NO \
          -derivedDataPath ./DerivedData 2>&1 | tail -20 || true
        
        echo ""
        echo "2. Try building with specific simulator"
        xcodebuild build \
          -project test_artifacts/TestProjectXCTest/TestProjectXCTest.xcodeproj \
          -scheme TestProjectXCTest \
          -destination 'platform=iOS Simulator,name=iPhone 16' \
          CODE_SIGNING_ALLOWED=NO \
          -derivedDataPath ./DerivedData 2>&1 | tail -20 || true
        
        echo ""
        echo "3. Try building for macOS (baseline - should work)"
        xcodebuild build \
          -project test_artifacts/TestProjectXCTest/TestProjectXCTest.xcodeproj \
          -scheme TestProjectXCTest \
          -destination 'platform=macOS' \
          CODE_SIGNING_ALLOWED=NO \
          -derivedDataPath ./DerivedData 2>&1 | tail -20 || true
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build TypeScript
      run: npm run build
    
    - name: Run E2E tests
      run: npm run test:e2e
      timeout-minutes: 90

  lint:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check TypeScript
      run: npx tsc --noEmit
    
    - name: Build
      run: npm run build

  release:
    needs: [test, e2e-test, lint]
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false